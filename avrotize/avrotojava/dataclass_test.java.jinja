{# dataclass_test.java.jinja - Data class test template #}

package {{ package_name }};

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
{%- if jackson_annotation %}
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
{%- endif %}

public class {{ class_name }}Test {
    private {{ class_name }} instance;

    public {{ class_name }}Test() {
        instance = {{ class_name }}Test.createInstance();
    }

    public static {{ class_name }} createInstance() {
        {{ class_name }} instance = new {{ class_name }}();
        {%- for field in fields %}
        {%- if field.is_class or field.is_enum %}
        instance.set{{ field.name | pascal }}({{ field.type }}Test.createInstance());
        {%- else %}
        {%- if not field.is_const %}
        instance.set{{ field.name | pascal }}({{ field.test_value }});
        {%- endif %}
        {%- endif %}
        {%- endfor %}
        return instance;
    }

    {%- for field in fields %}
    @Test
    public void test{{ field.name | pascal }}Property() {
        {{ field.type }} testValue = {{ field.test_value }};
        {%- if not field.is_const %}
        instance.set{{ field.name | pascal }}(testValue);
        {%- endif %}
        {%- if field.is_primitive %}
        {%- if field.type.startswith("java.util.List<") or field.type.startswith("java.util.Map<") %}
        assertEquals(testValue, instance.get{{ field.name | pascal }}());
        {%- else %}
        assertEquals(testValue, instance.get{{ field.name | pascal }}());
        {%- endif %}
        {%- else %}
        assertEquals(testValue, instance.get{{ field.name | pascal }}());
        {%- endif %}
    }
    {%- endfor %}

    {%- if avro_annotation %}
    @Test
    public void testToByteArrayFromDataAvro() throws Exception {
        String mediaType = "application/vnd.apache.avro+avro";
        byte[] bytes = instance.toByteArray(mediaType);
        {{ class_name }} newInstance = {{ class_name }}.fromData(bytes, mediaType);
        assertEquals(instance, newInstance);
    }
    {%- endif %}

    {%- if system_xml_annotation %}
    @Test
    public void testToByteArrayFromDataXml() throws Exception {
        String mediaType = "application/xml";
        byte[] bytes = instance.toByteArray(mediaType);
        {{ class_name }} newInstance = {{ class_name }}.fromData(bytes, mediaType);
        assertEquals(instance, newInstance);
    }
    {%- endif %}

    @Test
    public void testIsJsonMatch() throws Exception {
        {%- if jackson_annotation %}
        ObjectMapper mapper = new ObjectMapper();
        {{ class_name }} instance = createInstance();
        byte[] bytes = instance.toByteArray("application/json");
        JsonNode validNode = mapper.readTree(bytes);
        assertTrue({{ class_name }}.isJsonMatch(validNode));
        {%- else %}
        // Add tests for isJsonMatch if Jackson annotations are enabled
        {%- endif %}
    }

    {# Additional tests can be added here #}
}
