package {{ package_name }};

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonGenerator;

import org.apache.avro.generic.GenericData;
import java.io.IOException;

@JsonSerialize(using = {{ union_class_name }}.Serializer.class)
@JsonDeserialize(using = {{ union_class_name }}.Deserializer.class)
public class {{ union_class_name }} {

    {%- for type in union_types %}
    private {{ type }} _{{ type | strip_namespace | strip_dots | lower }};
    public {{ type }} get{{ type | strip_namespace | strip_dots | pascal }}() {
        return _{{ type | strip_namespace | strip_dots | lower }};
    }
    public void set{{ type | strip_namespace | strip_dots | pascal }}({{ type }} value) {
        this._{{ type | strip_namespace | strip_dots | lower }} = value;
    }
    {%- endfor %}

    // Default constructor
    public {{ union_class_name }}() {}

    // Constructors for each type
    {%- for type in union_types %}
    public {{ union_class_name }}({{ type }} value) {
        this._{{ type | strip_namespace | strip_dots | lower }} = value;
    }
    {%- endfor %}

    // Generic object getter
    public Object toObject() {
        {%- for type in union_types %}
        if (this._{{ type | strip_namespace | strip_dots | lower }} != null) {
            return this._{{ type | strip_namespace | strip_dots | lower }};
        }
        {%- endfor %}
        throw new UnsupportedOperationException("No value set in the union");
    }

    // Constructor from Avro GenericData.Record
    public {{ union_class_name }}(GenericData.Record record) {
        {%- for type in union_types %}
        if ({{ type }}.AVROSCHEMA.getName().equals(record.getSchema().getName())
            && {{ type }}.AVROSCHEMA.getNamespace().equals(record.getSchema().getNamespace())) {
            this._{{ type | strip_namespace | strip_dots | lower }} = new {{ type }}(record);
            return;
        }
        {%- endfor %}
        throw new UnsupportedOperationException("No record type is set in the union");
    }

    // JSON Serializer
    public static class Serializer extends JsonSerializer<{{ union_class_name }}> {
        @Override
        public void serialize({{ union_class_name }} value, JsonGenerator generator, SerializerProvider serializers) throws IOException {
            {%- for type in union_types %}
            {{ type }} {{ type | strip_namespace | strip_dots | lower }}Value = value.get{{ type | strip_namespace | strip_dots | pascal }}();
            if ({{ type | strip_namespace | strip_dots | lower }}Value != null) {
                generator.writeObject({{ type | strip_namespace | strip_dots | lower }}Value);
                return;
            }
            {%- endfor %}
            throw new UnsupportedOperationException("No record type is set in the union");
        }
    }

    // JSON Deserializer
    public static class Deserializer extends JsonDeserializer<{{ union_class_name }}> {
        @Override
        public {{ union_class_name }} deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
            ObjectMapper mapper = (ObjectMapper) p.getCodec();
            JsonNode node = mapper.readTree(p);

            {%- for type in union_types %}
            if (node.isObject() && {{ type }}.isJsonMatch(node)) {
                return new {{ union_class_name }}(mapper.treeToValue(node, {{ type }}.class));
            }
            {%- endfor %}
            throw new UnsupportedOperationException("No record type matched the JSON data");
        }
    }

    // JSON Match Method
    public static boolean isJsonMatch(JsonNode node) {
        return (
            {%- for type in union_types %}
            ({{ type }}.isJsonMatch(node)) 
            {%- if not loop.last %} || {%- endif %}
            {%- endfor %}
        );
    }
}
