[
  {
    "type": "record",
    "name": "TestAllTypesProto3",
    "namespace": "protobuf_test_messages.proto3",
    "fields": [
      {
        "name": "optional_int32",
        "type": "int",
        "doc": "Singular"
      },
      {
        "name": "optional_int64",
        "type": "long"
      },
      {
        "name": "optional_uint32",
        "type": "int"
      },
      {
        "name": "optional_uint64",
        "type": "long"
      },
      {
        "name": "optional_sint32",
        "type": "int"
      },
      {
        "name": "optional_sint64",
        "type": "long"
      },
      {
        "name": "optional_fixed32",
        "type": "int"
      },
      {
        "name": "optional_fixed64",
        "type": "long"
      },
      {
        "name": "optional_sfixed32",
        "type": "int"
      },
      {
        "name": "optional_sfixed64",
        "type": "long"
      },
      {
        "name": "optional_float",
        "type": "float"
      },
      {
        "name": "optional_double",
        "type": "double"
      },
      {
        "name": "optional_bool",
        "type": "boolean"
      },
      {
        "name": "optional_string",
        "type": "string"
      },
      {
        "name": "optional_bytes",
        "type": "bytes"
      },
      {
        "name": "optional_nested_message",
        "type": {
          "type": "record",
          "name": "NestedMessage",
          "namespace": "protobuf_test_messages.proto3",
          "fields": [
            {
              "name": "a",
              "type": "int"
            },
            {
              "name": "corecursive",
              "type": "TestAllTypesProto3"
            }
          ]
        }
      },
      {
        "name": "optional_foreign_message",
        "type": {
          "type": "record",
          "name": "ForeignMessage",
          "namespace": "protobuf_test_messages.proto3",
          "fields": [
            {
              "name": "c",
              "type": "int"
            }
          ]
        }
      },
      {
        "name": "optional_nested_enum",
        "type": {
          "name": "NestedEnum",
          "type": "enum",
          "namespace": "protobuf_test_messages.proto3",
          "symbols": [
            "FOO",
            "BAR",
            "BAZ",
            "NEG"
          ]
        }
      },
      {
        "name": "optional_foreign_enum",
        "type": {
          "name": "ForeignEnum",
          "type": "enum",
          "namespace": "protobuf_test_messages.proto3",
          "symbols": [
            "FOREIGN_FOO",
            "FOREIGN_BAR",
            "FOREIGN_BAZ"
          ]
        }
      },
      {
        "name": "optional_aliased_enum",
        "type": {
          "name": "AliasedEnum",
          "type": "enum",
          "namespace": "protobuf_test_messages.proto3",
          "symbols": [
            "ALIAS_FOO",
            "ALIAS_BAR",
            "ALIAS_BAZ",
            "MOO",
            "moo",
            "bAz"
          ]
        }
      },
      {
        "name": "optional_string_piece",
        "type": "string"
      },
      {
        "name": "optional_cord",
        "type": "string"
      },
      {
        "name": "recursive_message",
        "type": "TestAllTypesProto3"
      },
      {
        "name": "repeated_int32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "repeated_int64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "repeated_uint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "repeated_uint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "repeated_sint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "repeated_sint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "repeated_fixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "repeated_fixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "repeated_sfixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "repeated_sfixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "repeated_float",
        "type": {
          "type": "array",
          "items": "float"
        }
      },
      {
        "name": "repeated_double",
        "type": {
          "type": "array",
          "items": "double"
        }
      },
      {
        "name": "repeated_bool",
        "type": {
          "type": "array",
          "items": "boolean"
        }
      },
      {
        "name": "repeated_string",
        "type": {
          "type": "array",
          "items": "string"
        }
      },
      {
        "name": "repeated_bytes",
        "type": {
          "type": "array",
          "items": "bytes"
        }
      },
      {
        "name": "repeated_nested_message",
        "type": {
          "type": "array",
          "items": "NestedMessage"
        }
      },
      {
        "name": "repeated_foreign_message",
        "type": {
          "type": "array",
          "items": "ForeignMessage"
        }
      },
      {
        "name": "repeated_nested_enum",
        "type": {
          "type": "array",
          "items": "NestedEnum"
        }
      },
      {
        "name": "repeated_foreign_enum",
        "type": {
          "type": "array",
          "items": "ForeignEnum"
        }
      },
      {
        "name": "repeated_string_piece",
        "type": {
          "type": "array",
          "items": "string"
        }
      },
      {
        "name": "repeated_cord",
        "type": {
          "type": "array",
          "items": "string"
        }
      },
      {
        "name": "packed_int32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "packed_int64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "packed_uint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "packed_uint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "packed_sint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "packed_sint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "packed_fixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "packed_fixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "packed_sfixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "packed_sfixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "packed_float",
        "type": {
          "type": "array",
          "items": "float"
        }
      },
      {
        "name": "packed_double",
        "type": {
          "type": "array",
          "items": "double"
        }
      },
      {
        "name": "packed_bool",
        "type": {
          "type": "array",
          "items": "boolean"
        }
      },
      {
        "name": "packed_nested_enum",
        "type": {
          "type": "array",
          "items": "NestedEnum"
        }
      },
      {
        "name": "unpacked_int32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "unpacked_int64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "unpacked_uint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "unpacked_uint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "unpacked_sint32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "unpacked_sint64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "unpacked_fixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "unpacked_fixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "unpacked_sfixed32",
        "type": {
          "type": "array",
          "items": "int"
        }
      },
      {
        "name": "unpacked_sfixed64",
        "type": {
          "type": "array",
          "items": "long"
        }
      },
      {
        "name": "unpacked_float",
        "type": {
          "type": "array",
          "items": "float"
        }
      },
      {
        "name": "unpacked_double",
        "type": {
          "type": "array",
          "items": "double"
        }
      },
      {
        "name": "unpacked_bool",
        "type": {
          "type": "array",
          "items": "boolean"
        }
      },
      {
        "name": "unpacked_nested_enum",
        "type": {
          "type": "array",
          "items": "NestedEnum"
        }
      },
      {
        "name": "map_int32_int32",
        "type": {
          "type": "map",
          "values": "int"
        }
      },
      {
        "name": "map_int64_int64",
        "type": {
          "type": "map",
          "values": "long"
        }
      },
      {
        "name": "map_uint32_uint32",
        "type": {
          "type": "map",
          "values": "int"
        }
      },
      {
        "name": "map_uint64_uint64",
        "type": {
          "type": "map",
          "values": "long"
        }
      },
      {
        "name": "map_sint32_sint32",
        "type": {
          "type": "map",
          "values": "int"
        }
      },
      {
        "name": "map_sint64_sint64",
        "type": {
          "type": "map",
          "values": "long"
        }
      },
      {
        "name": "map_fixed32_fixed32",
        "type": {
          "type": "map",
          "values": "int"
        }
      },
      {
        "name": "map_fixed64_fixed64",
        "type": {
          "type": "map",
          "values": "long"
        }
      },
      {
        "name": "map_sfixed32_sfixed32",
        "type": {
          "type": "map",
          "values": "int"
        }
      },
      {
        "name": "map_sfixed64_sfixed64",
        "type": {
          "type": "map",
          "values": "long"
        }
      },
      {
        "name": "map_int32_float",
        "type": {
          "type": "map",
          "values": "float"
        }
      },
      {
        "name": "map_int32_double",
        "type": {
          "type": "map",
          "values": "double"
        }
      },
      {
        "name": "map_bool_bool",
        "type": {
          "type": "map",
          "values": "boolean"
        }
      },
      {
        "name": "map_string_string",
        "type": {
          "type": "map",
          "values": "string"
        }
      },
      {
        "name": "map_string_bytes",
        "type": {
          "type": "map",
          "values": "bytes"
        }
      },
      {
        "name": "map_string_nested_message",
        "type": {
          "type": "map",
          "values": "NestedMessage"
        }
      },
      {
        "name": "map_string_foreign_message",
        "type": {
          "type": "map",
          "values": "ForeignMessage"
        }
      },
      {
        "name": "map_string_nested_enum",
        "type": {
          "type": "map",
          "values": "NestedEnum"
        }
      },
      {
        "name": "map_string_foreign_enum",
        "type": {
          "type": "map",
          "values": "ForeignEnum"
        }
      },
      {
        "name": "optional_bool_wrapper",
        "type": {
          "type": "record",
          "name": "BoolValue",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "boolean",
              "doc": "The bool value."
            }
          ],
          "doc": "The JSON representation for `BoolValue` is JSON `true` and `false`."
        },
        "doc": "Well-known types"
      },
      {
        "name": "optional_int32_wrapper",
        "type": {
          "type": "record",
          "name": "Int32Value",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "int",
              "doc": "The int32 value."
            }
          ],
          "doc": "Wrapper message for `int32`. The JSON representation for `Int32Value` is JSON number."
        }
      },
      {
        "name": "optional_int64_wrapper",
        "type": {
          "type": "record",
          "name": "Int64Value",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "long",
              "doc": "The int64 value."
            }
          ]
        }
      },
      {
        "name": "optional_uint32_wrapper",
        "type": {
          "type": "record",
          "name": "UInt32Value",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "int",
              "doc": "The uint32 value."
            }
          ],
          "doc": "Wrapper message for `uint32`. The JSON representation for `UInt32Value` is JSON number."
        }
      },
      {
        "name": "optional_uint64_wrapper",
        "type": {
          "type": "record",
          "name": "UInt64Value",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "long",
              "doc": "The uint64 value."
            }
          ],
          "doc": "The JSON representation for `UInt64Value` is JSON string."
        }
      },
      {
        "name": "optional_float_wrapper",
        "type": {
          "type": "record",
          "name": "FloatValue",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "float",
              "doc": "The float value."
            }
          ]
        }
      },
      {
        "name": "optional_double_wrapper",
        "type": {
          "type": "record",
          "name": "DoubleValue",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "double",
              "doc": "The double value."
            }
          ],
          "doc": "Wrapper message for `double`. The JSON representation for `DoubleValue` is JSON number."
        }
      },
      {
        "name": "optional_string_wrapper",
        "type": {
          "type": "record",
          "name": "StringValue",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "string",
              "doc": "The string value."
            }
          ],
          "doc": "The JSON representation for `StringValue` is JSON string."
        }
      },
      {
        "name": "optional_bytes_wrapper",
        "type": {
          "type": "record",
          "name": "BytesValue",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "value",
              "type": "bytes",
              "doc": "The bytes value."
            }
          ],
          "doc": "Wrapper message for `bytes`. The JSON representation for `BytesValue` is JSON string."
        }
      },
      {
        "name": "repeated_bool_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.BoolValue"
        }
      },
      {
        "name": "repeated_int32_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.Int32Value"
        }
      },
      {
        "name": "repeated_int64_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.Int64Value"
        }
      },
      {
        "name": "repeated_uint32_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.UInt32Value"
        }
      },
      {
        "name": "repeated_uint64_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.UInt64Value"
        }
      },
      {
        "name": "repeated_float_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.FloatValue"
        }
      },
      {
        "name": "repeated_double_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.DoubleValue"
        }
      },
      {
        "name": "repeated_string_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.StringValue"
        }
      },
      {
        "name": "repeated_bytes_wrapper",
        "type": {
          "type": "array",
          "items": "google.protobuf.BytesValue"
        }
      },
      {
        "name": "optional_duration",
        "type": {
          "type": "record",
          "name": "Duration",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "seconds",
              "type": "long",
              "doc": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
            },
            {
              "name": "nanos",
              "type": "int",
              "doc": "of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive."
            }
          ],
          "doc": "end.seconds -= 1;       end.nanos += 1000000000;     } else if (end.nanos >= 1000000000) {       end.seconds += 1;       end.nanos -= 1000000000;     } Example 3: Compute Duration from datetime.timedelta in Python.     td = datetime.timedelta(days=3, minutes=10)     duration = Duration()     duration.FromTimedelta(td) # JSON Mapping In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1 microsecond should be expressed in JSON format as \"3.000001s\"."
        }
      },
      {
        "name": "optional_timestamp",
        "type": {
          "type": "long",
          "logicalType": "timestamp-micros"
        }
      },
      {
        "name": "optional_field_mask",
        "type": {
          "type": "record",
          "name": "FieldMask",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "paths",
              "type": {
                "type": "array",
                "items": "string"
              },
              "doc": "The set of field mask paths."
            }
          ],
          "doc": "be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string. If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource. For example, given the target message:     f {       b {         d: 1         x: 2       }       c: [1]     } And an update message:     f {       b {         d: 10       }       c: [2]     } then if the field mask is:  paths: [\"f.b\", \"f.c\"] then the result will be:     f {       b {         d: 10         x: 2       }       c: [1, 2]     } An implementation may provide options to override this default behavior for repeated and message fields. In order to reset a field's value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below. If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not. As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API. ## Considerations for HTTP REST The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates). # JSON Encoding of Field Masks In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions. As an example, consider the following message declarations:     message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     } In proto a field mask for `Profile` may look as such:     mask {       paths: \"user.display_name\"       paths: \"photo\"     } In JSON, the same mask is represented as below:     {       mask: \"user.displayName,photo\"     } # Field Masks and Oneof Fields Field masks treat fields in oneofs just as regular fields. Consider the following message:     message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     } The field mask can be:     mask {       paths: \"name\"     } Or:     mask {       paths: \"sub_message\"     } Note that oneof type names (\"test_oneof\" in this case) cannot be used in paths. ## Field Mask Verification The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is unmappable."
        }
      },
      {
        "name": "optional_struct",
        "type": {
          "type": "record",
          "name": "Struct",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "fields",
              "type": {
                "type": "map",
                "values": {
                  "type": "record",
                  "name": "Value",
                  "namespace": "google.protobuf",
                  "fields": [
                    {
                      "name": "kind",
                      "type": [
                        {
                          "name": "NullValue",
                          "type": "enum",
                          "namespace": "google.protobuf",
                          "symbols": [
                            "NULL_VALUE"
                          ],
                          "doc": "`NullValue` is a singleton enumeration to represent the null value for the `Value` type union. The JSON representation for `NullValue` is JSON `null`."
                        },
                        "double",
                        "string",
                        "boolean",
                        "Struct",
                        {
                          "type": "record",
                          "name": "ListValue",
                          "namespace": "google.protobuf",
                          "fields": [
                            {
                              "name": "values",
                              "type": {
                                "type": "array",
                                "items": "Value"
                              },
                              "doc": "Repeated field of dynamically typed values."
                            }
                          ],
                          "doc": "`ListValue` is a wrapper around a repeated field of values. The JSON representation for `ListValue` is JSON array."
                        }
                      ],
                      "doc": "The kind of value."
                    }
                  ],
                  "doc": "`Value` represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values. A producer of value is expected to set one of these variants. Absence of any variant indicates an error. The JSON representation for `Value` is JSON value."
                }
              },
              "doc": "Unordered map of dynamically typed values."
            }
          ],
          "doc": "scripting languages like JS a struct is represented as an object. The details of that representation are described together with the proto support for the language. The JSON representation for `Struct` is JSON object."
        }
      },
      {
        "name": "optional_any",
        "type": {
          "type": "record",
          "name": "Any",
          "namespace": "google.protobuf",
          "fields": [
            {
              "name": "type_url",
              "type": "string",
              "doc": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            {
              "name": "value",
              "type": "bytes"
            }
          ],
          "doc": "if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }      or ...     if (any.isSameTypeAs(Foo.getDefaultInstance())) {       foo = any.unpack(Foo.getDefaultInstance());     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
        }
      },
      {
        "name": "optional_value",
        "type": "google.protobuf.Value"
      },
      {
        "name": "optional_null_value",
        "type": "google.protobuf.NullValue"
      },
      {
        "name": "repeated_duration",
        "type": {
          "type": "array",
          "items": "google.protobuf.Duration"
        }
      },
      {
        "name": "repeated_timestamp",
        "type": {
          "type": "array",
          "items": {
            "type": "long",
            "logicalType": "timestamp-micros"
          }
        }
      },
      {
        "name": "repeated_fieldmask",
        "type": {
          "type": "array",
          "items": "google.protobuf.FieldMask"
        }
      },
      {
        "name": "repeated_struct",
        "type": {
          "type": "array",
          "items": "google.protobuf.Struct"
        }
      },
      {
        "name": "repeated_any",
        "type": {
          "type": "array",
          "items": "google.protobuf.Any"
        }
      },
      {
        "name": "repeated_value",
        "type": {
          "type": "array",
          "items": "google.protobuf.Value"
        }
      },
      {
        "name": "repeated_list_value",
        "type": {
          "type": "array",
          "items": "google.protobuf.ListValue"
        }
      },
      {
        "name": "fieldname1",
        "type": "int",
        "doc": "(protobuf says names can be any valid C/C++ identifier.)"
      },
      {
        "name": "field_name2",
        "type": "int"
      },
      {
        "name": "_field_name3",
        "type": "int"
      },
      {
        "name": "field__name4_",
        "type": "int"
      },
      {
        "name": "field0name5",
        "type": "int"
      },
      {
        "name": "field_0_name6",
        "type": "int"
      },
      {
        "name": "fieldName7",
        "type": "int"
      },
      {
        "name": "FieldName8",
        "type": "int"
      },
      {
        "name": "field_Name9",
        "type": "int"
      },
      {
        "name": "Field_Name10",
        "type": "int"
      },
      {
        "name": "FIELD_NAME11",
        "type": "int"
      },
      {
        "name": "FIELD_name12",
        "type": "int"
      },
      {
        "name": "__field_name13",
        "type": "int"
      },
      {
        "name": "__Field_name14",
        "type": "int"
      },
      {
        "name": "field__name15",
        "type": "int"
      },
      {
        "name": "field__Name16",
        "type": "int"
      },
      {
        "name": "field_name17__",
        "type": "int"
      },
      {
        "name": "Field_name18__",
        "type": "int"
      },
      {
        "name": "oneof_field",
        "type": [
          "int",
          "NestedMessage",
          "string",
          "bytes",
          "boolean",
          "long",
          "float",
          "double",
          "NestedEnum",
          "google.protobuf.NullValue"
        ]
      }
    ],
    "doc": "submessages of this message.  So for example, a fuzz test of TestAllTypes could trigger bugs that occur in any message type in this file.  We verify this stays true in a unit test."
  },
  {
    "type": "record",
    "name": "EnumOnlyProto3",
    "namespace": "protobuf_test_messages.proto3",
    "fields": []
  },
  {
    "name": "Bool",
    "type": "enum",
    "namespace": "protobuf_test_messages.proto3",
    "symbols": [
      "kFalse",
      "kTrue"
    ]
  },
  {
    "type": "record",
    "name": "NullHypothesisProto3",
    "namespace": "protobuf_test_messages.proto3",
    "fields": []
  }
]